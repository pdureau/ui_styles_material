<?php

/**
 * @file
 * The ui_suite_material hooks.
 */

use Drupal\Core\Template\Attribute;

/**
 * Add a value into the class attributes of a given element.
 *
 * Assumes element is an array.
 * Inspired by: https://www.drupal.org/node/3334294
 *
 * @param array $element
 *   An array.
 * @param string[]|string ...$classes
 *   The classes to add on element. Arguments can include string keys directly,
 *   or arrays of string keys.
 *
 * @return array
 *   The element with the given class(es) in attributes.
 */
function _ui_suite_material_add_class(array $element, ...$classes): array {
  if (\array_is_list($element)) {
    foreach ($element as $index => $item) {
      if (!\is_array($item)) {
        continue;
      }
      $element[$index] = _ui_suite_material_add_class($item, ...$classes);
    }
    return $element;
  }
  $attributes = new Attribute($element['#attributes'] ?? []);
  $attributes->addClass(...$classes);
  $element['#attributes'] = $attributes->toArray();
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for image_list patterns.
 *
 * See also: https://m2.material.io/components/image-lists/web.
 */
function ui_suite_material_preprocess_pattern_image_list(array &$variables) {
  if (array_key_exists('images', $variables) && is_array($variables['images'])) {
    $variables['images'] = _ui_suite_material_add_class($variables['images'], 'mdc-image-list__image');
  }
}

/**
 * Implements hook_preprocess_HOOK() for card patterns.
 *
 * See also: https://m2.material.io/develop/web/components/cards.
 */
function ui_suite_material_preprocess_pattern_card(array &$variables) {
  if ($variables['context']->getType() == 'preview') {
    $variables['attributes']['style'] = "max-width: 600px";
  }
  if (array_key_exists('action_buttons', $variables) && is_array($variables['action_buttons'])) {
    $variables['action_buttons'] = _ui_suite_material_add_class(
      $variables['action_buttons'],
      ['mdc-card__action', 'mdc-card__action--button']
    );
  }
  if (array_key_exists('action_icons', $variables) && is_array($variables['action_icons'])) {
    $variables['action_icons'] = _ui_suite_material_add_class($variables['action_icons'], 'mdc-card__action');
  }
}

/**
 * Implements hook_preprocess_HOOK() for banner patterns.
 *
 * See also: https://m2.material.io/components/banners/.
 */
function ui_suite_material_preprocess_pattern_banner(array &$variables) {
  if (array_key_exists('primary_action', $variables) && is_array($variables['primary_action'])) {
    $variables['primary_action'] = _ui_suite_material_add_class($variables['primary_action'], 'mdc-banner__primary-action');
  }
  if (array_key_exists('secondary_action', $variables) && is_array($variables['secondary_action'])) {
    $variables['secondary_action'] = _ui_suite_material_add_class($variables['secondary_action'], 'mdc-banner__secondary-action');
  }
}

/**
 * Implements hook_preprocess_HOOK() for top_app_bar patterns.
 *
 * See also: https://m2.material.io/components/app-bars-top.
 */
function ui_suite_material_preprocess_pattern_top_app_bar(array &$variables) {
  if (array_key_exists('navigation', $variables) && is_array($variables['navigation'])) {
    $variables['navigation'] = _ui_suite_material_add_class($variables['navigation'], 'mdc-top-app-bar__navigation-icon');
  }
  if (array_key_exists('buttons', $variables) && is_array($variables['buttons'])) {
    $variables['buttons'] = _ui_suite_material_add_class($variables['buttons'], 'mdc-top-app-bar__action-item');
  }
}

/**
 * Implements hook_preprocess_HOOK() for snackbar patterns.
 *
 * See also: https://m2.material.io/components/snackbars.
 */
function ui_suite_material_preprocess_pattern_snackbar(array &$variables) {
  if (array_key_exists('button', $variables) && is_array($variables['button'])) {
    $variables['button'] = _ui_suite_material_add_class($variables['button'], 'mdc-snackbar__action');
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'image'.
 *
 * Convert relative path to full path.
 */
function ui_suite_material_preprocess_image(array &$variables): void {
  $uri = $variables["uri"];
  $is_absolute = isset(parse_url($uri)['host']) || \str_starts_with($uri, "/") || \str_starts_with($uri, "data:");
  if (!$is_absolute) {
    $variables["attributes"]["src"] = base_path() . $variables["directory"] . "/" . $uri;
  }
}
